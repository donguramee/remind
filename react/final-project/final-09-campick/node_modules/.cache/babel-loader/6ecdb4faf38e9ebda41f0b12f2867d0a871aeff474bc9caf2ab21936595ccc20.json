{"ast":null,"code":"const BASE_URL = \"https://api.mandarin.weniv.co.kr\";\nexport const getCommentList = async post_id => {\n  try {\n    const response = await fetch(`${BASE_URL}/post/${post_id}/comments/?limit=infinity`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const json = await response.json();\n    if (json && Array.isArray(json.comments)) {\n      return json.comments;\n    } else {\n      console.error(\"Unexpected response format:\", json);\n      return [];\n    }\n  } catch (error) {\n    console.log(\"댓글을 불러오지 못했습니다!\", error);\n    return [];\n  }\n};\nexport const uploadComment = async (post_id, comment) => {\n  try {\n    const response = await fetch(`${BASE_URL}/post/${post_id}/comments`, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        comment: {\n          content: comment\n        }\n      })\n    });\n    const json = await response.json();\n    return json;\n  } catch (error) {\n    console.log(\"댓글을 업로드하지 못했습니다!\", error);\n  }\n};","map":{"version":3,"names":["BASE_URL","getCommentList","post_id","response","fetch","method","headers","Authorization","localStorage","getItem","json","Array","isArray","comments","console","error","log","uploadComment","comment","body","JSON","stringify","content"],"sources":["/Users/dongura_me/Desktop/dongurame-remind/remind/react/final-project/final-09-campick/src/api/commentApi.js"],"sourcesContent":["const BASE_URL = \"https://api.mandarin.weniv.co.kr\";\n\nexport const getCommentList = async post_id => {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/post/${post_id}/comments/?limit=infinity`,\n      {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          \"Content-Type\": \"application/json\",\n        },\n      },\n    );\n    const json = await response.json();\n    if (json && Array.isArray(json.comments)) {\n      return json.comments;\n    } else {\n      console.error(\"Unexpected response format:\", json);\n      return [];\n    }\n  } catch (error) {\n    console.log(\"댓글을 불러오지 못했습니다!\", error);\n    return [];\n  }\n};\n\nexport const uploadComment = async (post_id, comment) => {\n  try {\n    const response = await fetch(`${BASE_URL}/post/${post_id}/comments`, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        comment: {\n          content: comment,\n        },\n      }),\n    });\n    const json = await response.json();\n    return json;\n  } catch (error) {\n    console.log(\"댓글을 업로드하지 못했습니다!\", error);\n  }\n};\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,kCAAkC;AAEnD,OAAO,MAAMC,cAAc,GAAG,MAAMC,OAAO,IAAI;EAC7C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,GAAEJ,QAAS,SAAQE,OAAQ,2BAA0B,EACtD;MACEG,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACPC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE,EAAC;QACxD,cAAc,EAAE;MAClB;IACF,CACF,CAAC;IACD,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACO,IAAI,CAAC,CAAC;IAClC,IAAIA,IAAI,IAAIC,KAAK,CAACC,OAAO,CAACF,IAAI,CAACG,QAAQ,CAAC,EAAE;MACxC,OAAOH,IAAI,CAACG,QAAQ;IACtB,CAAC,MAAM;MACLC,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEL,IAAI,CAAC;MAClD,OAAO,EAAE;IACX;EACF,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdD,OAAO,CAACE,GAAG,CAAC,iBAAiB,EAAED,KAAK,CAAC;IACrC,OAAO,EAAE;EACX;AACF,CAAC;AAED,OAAO,MAAME,aAAa,GAAG,MAAAA,CAAOf,OAAO,EAAEgB,OAAO,KAAK;EACvD,IAAI;IACF,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,QAAS,SAAQE,OAAQ,WAAU,EAAE;MACnEG,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACPC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE,EAAC;QACxD,cAAc,EAAE;MAClB,CAAC;MACDU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBH,OAAO,EAAE;UACPI,OAAO,EAAEJ;QACX;MACF,CAAC;IACH,CAAC,CAAC;IACF,MAAMR,IAAI,GAAG,MAAMP,QAAQ,CAACO,IAAI,CAAC,CAAC;IAClC,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdD,OAAO,CAACE,GAAG,CAAC,kBAAkB,EAAED,KAAK,CAAC;EACxC;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}