{"ast":null,"code":"import imageCompression from \"browser-image-compression\";\nimport { uploadImage } from \"./api/imageApi\";\nconst API_URL = \"https://api.mandarin.weniv.co.kr\";\nconst imageValidation = async (e, maxSize = 1, maxHeight = 320, setSelectedImage, setShowSizeOverToast, setShowWrongExtensionToast) => {\n  const allowedExtensionsRegex = /\\.(jpg|gif|png|jpeg|bmp|tif|heic)$/i;\n  const maxImageSize = 10 * 1024 * 1024;\n  const imageFile = e.target.files[0];\n  if (imageFile) {\n    if (imageFile.size > maxImageSize) {\n      setShowSizeOverToast(true);\n      setTimeout(() => setShowSizeOverToast(false), 3000);\n      e.target.value = \"\";\n      return;\n    }\n    const fileExtension = \".\" + imageFile.name.split(\".\").pop().toLowerCase();\n    if (!allowedExtensionsRegex.test(fileExtension)) {\n      setShowWrongExtensionToast(true);\n      setTimeout(() => setShowWrongExtensionToast(false), 3000);\n      e.target.value = \"\";\n      return;\n    }\n    try {\n      const compressedImageFile = await imageCompression(imageFile, {\n        maxSizeMb: maxSize,\n        maxWidthOrHeight: maxHeight\n      });\n      const reader = new FileReader();\n      reader.readAsDataURL(compressedImageFile);\n      reader.onloadend = () => {\n        const base64data = reader.result;\n        handlingData(base64data, setSelectedImage);\n      };\n    } catch (error) {\n      console.error(error);\n    }\n  } else {\n    e.target.value = \"\";\n  }\n};\nconst handlingData = async (dataURL, setSelectedImage) => {\n  const byteString = atob(dataURL.split(\",\")[1]);\n  const ab = new ArrayBuffer(byteString.length);\n  const ia = new Uint8Array(ab);\n  for (let i = 0; i < byteString.length; i++) {\n    ia[i] = byteString.charCodeAt(i);\n  }\n  const blob = new Blob([ia], {\n    type: \"image/jpeg\"\n  });\n  const file = new File([blob], \"image.jpg\");\n  const formData = new FormData();\n  formData.append(\"image\", file);\n  const resData = await uploadImage(formData);\n  const imageUrl = `${API_URL}/` + resData.filename;\n  setSelectedImage(imageUrl);\n};\nexport default imageValidation;","map":{"version":3,"names":["imageCompression","uploadImage","API_URL","imageValidation","e","maxSize","maxHeight","setSelectedImage","setShowSizeOverToast","setShowWrongExtensionToast","allowedExtensionsRegex","maxImageSize","imageFile","target","files","size","setTimeout","value","fileExtension","name","split","pop","toLowerCase","test","compressedImageFile","maxSizeMb","maxWidthOrHeight","reader","FileReader","readAsDataURL","onloadend","base64data","result","handlingData","error","console","dataURL","byteString","atob","ab","ArrayBuffer","length","ia","Uint8Array","i","charCodeAt","blob","Blob","type","file","File","formData","FormData","append","resData","imageUrl","filename"],"sources":["/Users/dongura_me/Desktop/dongurame-remind/remind/react/final-project/final-09-campick/src/imageValidation.js"],"sourcesContent":["import imageCompression from \"browser-image-compression\";\nimport { uploadImage } from \"./api/imageApi\";\n\nconst API_URL = \"https://api.mandarin.weniv.co.kr\";\n\nconst imageValidation = async (\n  e,\n  maxSize = 1,\n  maxHeight = 320,\n  setSelectedImage,\n  setShowSizeOverToast,\n  setShowWrongExtensionToast,\n) => {\n  const allowedExtensionsRegex = /\\.(jpg|gif|png|jpeg|bmp|tif|heic)$/i;\n  const maxImageSize = 10 * 1024 * 1024;\n  const imageFile = e.target.files[0];\n  if (imageFile) {\n    if (imageFile.size > maxImageSize) {\n      setShowSizeOverToast(true);\n      setTimeout(() => setShowSizeOverToast(false), 3000);\n      e.target.value = \"\";\n      return;\n    }\n    const fileExtension = \".\" + imageFile.name.split(\".\").pop().toLowerCase();\n    if (!allowedExtensionsRegex.test(fileExtension)) {\n      setShowWrongExtensionToast(true);\n      setTimeout(() => setShowWrongExtensionToast(false), 3000);\n      e.target.value = \"\";\n      return;\n    }\n\n    try {\n      const compressedImageFile = await imageCompression(imageFile, {\n        maxSizeMb: maxSize,\n        maxWidthOrHeight: maxHeight,\n      });\n      const reader = new FileReader();\n      reader.readAsDataURL(compressedImageFile);\n      reader.onloadend = () => {\n        const base64data = reader.result;\n        handlingData(base64data, setSelectedImage);\n      };\n    } catch (error) {\n      console.error(error);\n    }\n  } else {\n    e.target.value = \"\";\n  }\n};\n\nconst handlingData = async (dataURL, setSelectedImage) => {\n  const byteString = atob(dataURL.split(\",\")[1]);\n\n  const ab = new ArrayBuffer(byteString.length);\n  const ia = new Uint8Array(ab);\n  for (let i = 0; i < byteString.length; i++) {\n    ia[i] = byteString.charCodeAt(i);\n  }\n  const blob = new Blob([ia], {\n    type: \"image/jpeg\",\n  });\n  const file = new File([blob], \"image.jpg\");\n\n  const formData = new FormData();\n  formData.append(\"image\", file);\n  const resData = await uploadImage(formData);\n\n  const imageUrl = `${API_URL}/` + resData.filename;\n  setSelectedImage(imageUrl);\n};\n\nexport default imageValidation;\n"],"mappings":"AAAA,OAAOA,gBAAgB,MAAM,2BAA2B;AACxD,SAASC,WAAW,QAAQ,gBAAgB;AAE5C,MAAMC,OAAO,GAAG,kCAAkC;AAElD,MAAMC,eAAe,GAAG,MAAAA,CACtBC,CAAC,EACDC,OAAO,GAAG,CAAC,EACXC,SAAS,GAAG,GAAG,EACfC,gBAAgB,EAChBC,oBAAoB,EACpBC,0BAA0B,KACvB;EACH,MAAMC,sBAAsB,GAAG,qCAAqC;EACpE,MAAMC,YAAY,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI;EACrC,MAAMC,SAAS,GAAGR,CAAC,CAACS,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;EACnC,IAAIF,SAAS,EAAE;IACb,IAAIA,SAAS,CAACG,IAAI,GAAGJ,YAAY,EAAE;MACjCH,oBAAoB,CAAC,IAAI,CAAC;MAC1BQ,UAAU,CAAC,MAAMR,oBAAoB,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC;MACnDJ,CAAC,CAACS,MAAM,CAACI,KAAK,GAAG,EAAE;MACnB;IACF;IACA,MAAMC,aAAa,GAAG,GAAG,GAAGN,SAAS,CAACO,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACzE,IAAI,CAACZ,sBAAsB,CAACa,IAAI,CAACL,aAAa,CAAC,EAAE;MAC/CT,0BAA0B,CAAC,IAAI,CAAC;MAChCO,UAAU,CAAC,MAAMP,0BAA0B,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC;MACzDL,CAAC,CAACS,MAAM,CAACI,KAAK,GAAG,EAAE;MACnB;IACF;IAEA,IAAI;MACF,MAAMO,mBAAmB,GAAG,MAAMxB,gBAAgB,CAACY,SAAS,EAAE;QAC5Da,SAAS,EAAEpB,OAAO;QAClBqB,gBAAgB,EAAEpB;MACpB,CAAC,CAAC;MACF,MAAMqB,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,aAAa,CAACL,mBAAmB,CAAC;MACzCG,MAAM,CAACG,SAAS,GAAG,MAAM;QACvB,MAAMC,UAAU,GAAGJ,MAAM,CAACK,MAAM;QAChCC,YAAY,CAACF,UAAU,EAAExB,gBAAgB,CAAC;MAC5C,CAAC;IACH,CAAC,CAAC,OAAO2B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB;EACF,CAAC,MAAM;IACL9B,CAAC,CAACS,MAAM,CAACI,KAAK,GAAG,EAAE;EACrB;AACF,CAAC;AAED,MAAMgB,YAAY,GAAG,MAAAA,CAAOG,OAAO,EAAE7B,gBAAgB,KAAK;EACxD,MAAM8B,UAAU,GAAGC,IAAI,CAACF,OAAO,CAAChB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EAE9C,MAAMmB,EAAE,GAAG,IAAIC,WAAW,CAACH,UAAU,CAACI,MAAM,CAAC;EAC7C,MAAMC,EAAE,GAAG,IAAIC,UAAU,CAACJ,EAAE,CAAC;EAC7B,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,UAAU,CAACI,MAAM,EAAEG,CAAC,EAAE,EAAE;IAC1CF,EAAE,CAACE,CAAC,CAAC,GAAGP,UAAU,CAACQ,UAAU,CAACD,CAAC,CAAC;EAClC;EACA,MAAME,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACL,EAAE,CAAC,EAAE;IAC1BM,IAAI,EAAE;EACR,CAAC,CAAC;EACF,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACJ,IAAI,CAAC,EAAE,WAAW,CAAC;EAE1C,MAAMK,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEJ,IAAI,CAAC;EAC9B,MAAMK,OAAO,GAAG,MAAMrD,WAAW,CAACkD,QAAQ,CAAC;EAE3C,MAAMI,QAAQ,GAAI,GAAErD,OAAQ,GAAE,GAAGoD,OAAO,CAACE,QAAQ;EACjDjD,gBAAgB,CAACgD,QAAQ,CAAC;AAC5B,CAAC;AAED,eAAepD,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}