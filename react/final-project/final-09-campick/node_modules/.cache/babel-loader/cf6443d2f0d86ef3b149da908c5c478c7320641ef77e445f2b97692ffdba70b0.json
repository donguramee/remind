{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { uploadImages } from \"../api/imageApi\";\nimport imageCompression from \"browser-image-compression\";\nconst ALLOWED_EXTENSIONS = [\".jpg\", \".gif\", \".png\", \".jpeg\", \".bmp\", \".tif\", \".heic\"];\nconst MAX_SIZE = 10 * 1024 * 1024;\nconst useImagesUpload = () => {\n  _s();\n  const [images, setImages] = useState([]);\n  const onUpload = async (files, length, setShowWrongExtensionToast) => {\n    if (images.length + length > 3) return alert(\"이미지는 최대 3개까지 업로드 할 수 있습니다.\");\n    const options = {\n      maxSizeMB: 1,\n      maxWidthOrHeight: 1920\n    };\n    const formData = new FormData();\n    await Promise.all(Array.from(files).map(async file => {\n      const fileExtension = file.name.split(\".\").pop().toLowerCase();\n      if (ALLOWED_EXTENSIONS.includes(`.${fileExtension}`) && file.size <= MAX_SIZE) {\n        try {\n          const compressedImageFile = await imageCompression(file, options);\n          const fromBlobToFile = new File([compressedImageFile], \"image.jpeg\");\n          formData.append(\"image\", fromBlobToFile);\n        } catch (error) {\n          console.error(error);\n        }\n      } else {\n        setShowWrongExtensionToast(true);\n        setTimeout(() => {\n          setShowWrongExtensionToast(false);\n        }, 1000);\n      }\n    }));\n    try {\n      const data = await uploadImages(formData);\n      const filenames = data.map(data => data.filename);\n      setImages(prev => [...prev, ...filenames]);\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n  const onDelete = index => {\n    setImages(prevImages => {\n      const updatedImages = [...prevImages];\n      updatedImages.splice(index, 1);\n      return updatedImages;\n    });\n    alert(\"삭제되었습니다.\");\n  };\n  return {\n    images,\n    onUpload,\n    onDelete\n  };\n};\n_s(useImagesUpload, \"mOoWwfdsCKBG2MIVzAXM/MEStpE=\");\nexport default useImagesUpload;","map":{"version":3,"names":["useState","uploadImages","imageCompression","ALLOWED_EXTENSIONS","MAX_SIZE","useImagesUpload","_s","images","setImages","onUpload","files","length","setShowWrongExtensionToast","alert","options","maxSizeMB","maxWidthOrHeight","formData","FormData","Promise","all","Array","from","map","file","fileExtension","name","split","pop","toLowerCase","includes","size","compressedImageFile","fromBlobToFile","File","append","error","console","setTimeout","data","filenames","filename","prev","message","onDelete","index","prevImages","updatedImages","splice"],"sources":["/Users/dongura_me/Desktop/dongurame-remind/remind/react/final-project/final-09-campick/src/hooks/useImagesUpload.js"],"sourcesContent":["import { useState } from \"react\";\nimport { uploadImages } from \"../api/imageApi\";\nimport imageCompression from \"browser-image-compression\";\nconst ALLOWED_EXTENSIONS = [\n  \".jpg\",\n  \".gif\",\n  \".png\",\n  \".jpeg\",\n  \".bmp\",\n  \".tif\",\n  \".heic\",\n];\nconst MAX_SIZE = 10 * 1024 * 1024;\n\nconst useImagesUpload = () => {\n  const [images, setImages] = useState([]);\n\n  const onUpload = async (files, length, setShowWrongExtensionToast) => {\n    if (images.length + length > 3)\n      return alert(\"이미지는 최대 3개까지 업로드 할 수 있습니다.\");\n    const options = {\n      maxSizeMB: 1,\n      maxWidthOrHeight: 1920,\n    };\n\n    const formData = new FormData();\n    await Promise.all(\n      Array.from(files).map(async file => {\n        const fileExtension = file.name.split(\".\").pop().toLowerCase();\n        if (\n          ALLOWED_EXTENSIONS.includes(`.${fileExtension}`) &&\n          file.size <= MAX_SIZE\n        ) {\n          try {\n            const compressedImageFile = await imageCompression(file, options);\n            const fromBlobToFile = new File(\n              [compressedImageFile],\n              \"image.jpeg\",\n            );\n            formData.append(\"image\", fromBlobToFile);\n          } catch (error) {\n            console.error(error);\n          }\n        } else {\n          setShowWrongExtensionToast(true);\n          setTimeout(() => {\n            setShowWrongExtensionToast(false);\n          }, 1000);\n        }\n      }),\n    );\n\n    try {\n      const data = await uploadImages(formData);\n      const filenames = data.map(data => data.filename);\n      setImages(prev => [...prev, ...filenames]);\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  const onDelete = index => {\n    setImages(prevImages => {\n      const updatedImages = [...prevImages];\n      updatedImages.splice(index, 1);\n      return updatedImages;\n    });\n\n    alert(\"삭제되었습니다.\");\n  };\n\n  return { images, onUpload, onDelete };\n};\n\nexport default useImagesUpload;\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,OAAOC,gBAAgB,MAAM,2BAA2B;AACxD,MAAMC,kBAAkB,GAAG,CACzB,MAAM,EACN,MAAM,EACN,MAAM,EACN,OAAO,EACP,MAAM,EACN,MAAM,EACN,OAAO,CACR;AACD,MAAMC,QAAQ,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI;AAEjC,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMS,QAAQ,GAAG,MAAAA,CAAOC,KAAK,EAAEC,MAAM,EAAEC,0BAA0B,KAAK;IACpE,IAAIL,MAAM,CAACI,MAAM,GAAGA,MAAM,GAAG,CAAC,EAC5B,OAAOE,KAAK,CAAC,4BAA4B,CAAC;IAC5C,MAAMC,OAAO,GAAG;MACdC,SAAS,EAAE,CAAC;MACZC,gBAAgB,EAAE;IACpB,CAAC;IAED,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/B,MAAMC,OAAO,CAACC,GAAG,CACfC,KAAK,CAACC,IAAI,CAACZ,KAAK,CAAC,CAACa,GAAG,CAAC,MAAMC,IAAI,IAAI;MAClC,MAAMC,aAAa,GAAGD,IAAI,CAACE,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MAC9D,IACE1B,kBAAkB,CAAC2B,QAAQ,CAAE,IAAGL,aAAc,EAAC,CAAC,IAChDD,IAAI,CAACO,IAAI,IAAI3B,QAAQ,EACrB;QACA,IAAI;UACF,MAAM4B,mBAAmB,GAAG,MAAM9B,gBAAgB,CAACsB,IAAI,EAAEV,OAAO,CAAC;UACjE,MAAMmB,cAAc,GAAG,IAAIC,IAAI,CAC7B,CAACF,mBAAmB,CAAC,EACrB,YACF,CAAC;UACDf,QAAQ,CAACkB,MAAM,CAAC,OAAO,EAAEF,cAAc,CAAC;QAC1C,CAAC,CAAC,OAAOG,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;QACtB;MACF,CAAC,MAAM;QACLxB,0BAA0B,CAAC,IAAI,CAAC;QAChC0B,UAAU,CAAC,MAAM;UACf1B,0BAA0B,CAAC,KAAK,CAAC;QACnC,CAAC,EAAE,IAAI,CAAC;MACV;IACF,CAAC,CACH,CAAC;IAED,IAAI;MACF,MAAM2B,IAAI,GAAG,MAAMtC,YAAY,CAACgB,QAAQ,CAAC;MACzC,MAAMuB,SAAS,GAAGD,IAAI,CAAChB,GAAG,CAACgB,IAAI,IAAIA,IAAI,CAACE,QAAQ,CAAC;MACjDjC,SAAS,CAACkC,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE,GAAGF,SAAS,CAAC,CAAC;IAC5C,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAACO,OAAO,CAAC;IAC9B;EACF,CAAC;EAED,MAAMC,QAAQ,GAAGC,KAAK,IAAI;IACxBrC,SAAS,CAACsC,UAAU,IAAI;MACtB,MAAMC,aAAa,GAAG,CAAC,GAAGD,UAAU,CAAC;MACrCC,aAAa,CAACC,MAAM,CAACH,KAAK,EAAE,CAAC,CAAC;MAC9B,OAAOE,aAAa;IACtB,CAAC,CAAC;IAEFlC,KAAK,CAAC,UAAU,CAAC;EACnB,CAAC;EAED,OAAO;IAAEN,MAAM;IAAEE,QAAQ;IAAEmC;EAAS,CAAC;AACvC,CAAC;AAACtC,EAAA,CA1DID,eAAe;AA4DrB,eAAeA,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}